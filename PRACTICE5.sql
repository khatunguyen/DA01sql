-- Bài 1 --
SELECT COUNTRY.Continent, FLOOR(AVG(CITY.Population)) --floor: hàm làm tròn xuống; ceiling: làm tròn lên --
FROM CITY JOIN COUNTRY 
ON CITY.CountryCode = COUNTRY.Code 
GROUP BY COUNTRY.Continent;
-- Bài 2 
SELECT (ROUND(COUNT(texts.email_id)::DECIMAL
    /COUNT(DISTINCT emails.email_id),2)) AS activation
FROM emails
LEFT JOIN texts
ON emails.email_id = texts.email_id
AND signup_action='Confirmed'
-- Bài 3
SELECT 
  age.age_bucket, 
  ROUND(100.0 * 
    SUM(activities.time_spent) FILTER (WHERE activities.activity_type = 'send')/
    SUM(activities.time_spent),2) AS send_percent, 
  ROUND(100.0 * 
    SUM(activities.time_spent) FILTER (WHERE activities.activity_type = 'open')/
    SUM(activities.time_spent),2) AS open_percent
FROM activities
INNER JOIN age_breakdown AS age 
  ON activities.user_id = age.user_id 
WHERE activities.activity_type IN ('send', 'open') 
GROUP BY age.age_bucket;
-- BÀI 4
SELECT CUSTOMER_ID
FROM customer_contracts
INNER JOIN PRODUCTS
ON customer_contracts.PRODUCT_ID=PRODUCTS.PRODUCT_ID
GROUP BY CUSTOMER_ID
HAVING COUNT(DISTINCT products.product_category) = 3;
-- BÀI 5 
SELECT E1.Employee_id, E1.name, COUNT(E2.EMPLOYEE_ID) AS reports_count, round(avg(E2.age)) AS average_age
FROM EMPLOYEES as E1
INNER JOIN EMPLOYEES AS E2
ON E1.Employee_id= E2.reports_to
GROUP BY E1.EMPLOYEE_ID
ORDER BY E1.EMPLOYEE_ID
-- BÀI 6
SELECT
    P.product_name,
    SUM(O.unit) AS unit
FROM Orders AS O
LEFT JOIN Products AS P
    ON O.product_id = P.product_id
WHERE DATE_FORMAT(O.order_date,'%Y-%m') ='2020-02'
GROUP BY O.product_id
HAVING unit >=100;
-- BÀI 7
SELECT PAGES.PAGE_ID
FROM PAGES
LEFT JOIN PAGE_LIKES
ON PAGES.PAGE_ID=PAGE_LIKES.PAGE_ID
WHERE PAGE_LIKES.PAGE_ID IS NULL
--------------------------------------------------
-- BÀI 1
SELECT DISTINCT REPLACEMENT_COST
FROM FILM
-- BÀI 2
SELECT 
  COUNT(CASE WHEN LOW > 0 THEN LOW END) AS rows_low
FROM (
  SELECT 
	(CASE WHEN REPLACEMENT_COST BETWEEN 9.99 AND 19.99 THEN REPLACEMENT_COST ELSE 0 END) AS LOW,
    (CASE WHEN REPLACEMENT_COST BETWEEN 20.00 AND 24.99 THEN REPLACEMENT_COST ELSE 0 END) AS MEDIUM,
    (CASE WHEN REPLACEMENT_COST BETWEEN 25.00 AND 29.99 THEN REPLACEMENT_COST ELSE 0 END) AS HIGH
  FROM FILM) AS SUBQUERY
-- BÀI 3
SELECT FILM.TITLE, FILM.LENGTH, CATEGORY.NAME
FROM FILM
JOIN FILM_CATEGORY ON FILM.FILM_ID=FILM_CATEGORY.FILM_ID
JOIN CATEGORY ON FILM_CATEGORY.CATEGORY_ID=CATEGORY.CATEGORY_ID
WHERE CATEGORY.NAME IN ('Drama', 'Sports')
ORDER BY FILM.LENGTH DESC
-- BÀI 4

SELECT CATEGORY.NAME, COUNT(*) AS FILM_COUNT
FROM FILM
JOIN FILM_CATEGORY ON FILM.FILM_ID=FILM_CATEGORY.FILM_ID
JOIN CATEGORY ON FILM_CATEGORY.CATEGORY_ID=CATEGORY.CATEGORY_ID
GROUP BY CATEGORY.NAME
ORDER BY FILM_COUNT DESC
-- BÀI 5
SELECT ACTOR.FIRST_NAME, ACTOR.LAST_NAME, COUNT(*) AS ACTOR_COUNT
FROM ACTOR
JOIN FILM_ACTOR ON FILM_ACTOR.ACTOR_ID=ACTOR.ACTOR_ID
GROUP BY ACTOR.FIRST_NAME, ACTOR.LAST_NAME
ORDER BY ACTOR_COUNT DESC
-- BÀI 6
SELECT CUSTOMER.ADDRESS_ID, COUNT(*) AS ADDRESS_COUNT
FROM ADDRESS
LEFT JOIN CUSTOMER ON ADDRESS.ADDRESS_ID = CUSTOMER.ADDRESS_ID
WHERE CUSTOMER.ADDRESS_ID IS NULL
GROUP BY CUSTOMER.ADDRESS_ID
-- BÀI 7
SELECT CITY.CITY, SUM(PAYMENT.AMOUNT) AS CITY_AVENUE
FROM PAYMENT
JOIN CUSTOMER ON CUSTOMER.CUSTOMER_ID=PAYMENT.CUSTOMER_ID
JOIN ADDRESS ON ADDRESS.ADDRESS_ID=CUSTOMER.ADDRESS_ID
JOIN CITY ON CITY.CITY_ID=ADDRESS.CITY_ID
GROUP BY CITY.CITY
ORDER BY CITY_AVENUE DESC
-- Bài 8
SELECT CONCAT (CITY.CITY, ', ', COUNTRY.COUNTRY) AS CITY_COUNTRY,  SUM(PAYMENT.AMOUNT) AS DOANHTHU
FROM PAYMENT
JOIN CUSTOMER ON CUSTOMER.CUSTOMER_ID=PAYMENT.CUSTOMER_ID
JOIN ADDRESS ON ADDRESS.ADDRESS_ID=CUSTOMER.ADDRESS_ID
JOIN CITY ON CITY.CITY_ID=ADDRESS.CITY_ID
JOIN COUNTRY ON COUNTRY.COUNTRY_ID=CITY.COUNTRY_ID
GROUP BY CITY_COUNTRY
ORDER BY DOANHTHU DESC

